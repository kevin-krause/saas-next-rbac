generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  owns_projects      Project[]
  comments           Comment[]

  reportedTasks Task[]    @relation("ReportedTasks")
  assignedTasks Task[]    @relation("AssignedTasks")
  mentions      Mention[] @relation("MentionedUser")
  subProjects SubProject[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  @unique
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites  Invite[]
  members  Member[]
  projects Project[]

  @@map("organizations")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  slug        String   @unique
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  tasks Task[]
  subProjects SubProject[]

  @@map("projects")
}

model SubProject {
  id          String   @id @default(uuid())
  name        String
  description String
  slug        String   @map("projects")
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")  
  
  organizationId String       @map("organization_id")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  tasks Task[]

  @@map("subProjects")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  eta         DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  reporter   User   @relation("ReportedTasks", fields: [reporterId], references: [id])
  reporterId String @map("reporter_id")

  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId String? @map("assignee_id")

  comments Comment[]
  subProjects SubProject[]


  @@map("tasks")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String @map("task_id")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  mention Mention[]

  @@map("comments")
}

model Mention {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String  @map("comment_id")

  mentionedUser   User   @relation("MentionedUser", fields: [mentionedUserId], references: [id])
  mentionedUserId String @map("mentioned_user_id")

  @@map("mentions")
}
